(defun radius(r) (* pi (* r r)))
(defun interest (x) (* x (/ 0.1 12)))
(defun square (x) (* x x))
(defun eu-distance (p1 p2)
    (sqrt (-
        (square (- (car p1) (car p2)))
        (square (- (cadr p1) (cadr p2)))
        )
    )
)
(defun head (x) (car x))
(defun tail (x) (cdr x))
(defun switch (x) 
    (list (cadr x) (car x))
)
(defun car-atomp (x)
    (cond ((listp x) (atom (car x))))
)
(defun cond-ex1 (x)
    (cond 
        ((numberp x)(+ x 7))
        ((listp x)(cons 'a x))
    )
)
(defun cond-ex2 (x)
    (cond 
        ((listp x)(setq flag 'list)(cons 'a x))
        ((numberp x)(setq flag 'number)(+ 7 x))
    )
)
(defun cond-ex3 (x)
    (cond
        ((listp x)(setq flag 'list)(cons 'a x))
        ((numberp x)(setq flag 'number)(+ 7 x))
        (t (setq flag 'neither) nil)
    )
)